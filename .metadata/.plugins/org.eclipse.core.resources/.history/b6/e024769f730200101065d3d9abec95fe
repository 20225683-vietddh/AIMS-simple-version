package model;

import java.util.*;

public class Store {
	private Map<Media, Integer> itemsInStore = new HashMap<Media, Integer>();
	
	public int getItemQuantity(Media media) {
		return itemsInStore.get(media);
	}
	
	public Set<Media> getItemsInStore() {
		return this.itemsInStore.keySet();
	}
	
	public Map<Media, Integer> getItemsInStoreWithQuantity() {
		return this.itemsInStore;
	}
	
	public void addMedia(Media media, int quantity) {
		if (media == null || quantity <= 0) {
			System.out.println("‚ùå Invalid media or the quantity must be greater than 0.");
			return;
		}
		
		itemsInStore.put(media, itemsInStore.getOrDefault(media, 0) + quantity);
		System.out.println("You've added " + quantity + " items '" + media.getTitle() + "' to store.");
	}
	
	public void removeMedia(Media media) {
		if (media == null) {
			System.out.println("‚ùå Invalid media.");
			return;
		}
		
		if (itemsInStore.containsKey(media)) {
			itemsInStore.remove(media);
			System.out.println("Deleted '" + media.getTitle() + "' from store.");
		} else {
			System.out.println("‚ùå Item '" + media.getTitle() + "' does not exist in current store.");
		}
	}
	
	public void searchItemsByTitle(String keyword) {
		if (keyword == null || keyword.trim().isEmpty()) {
			System.out.println("‚ùå Keyword is invalid");
			return;
		}
		
		boolean found = false;
		
		System.out.println("üîç See the result(s) when you search for '" + keyword + "':");
		
		for (Map.Entry<Media, Integer> entry : itemsInStore.entrySet()) {
			Media media = entry.getKey();
			int quantity = entry.getValue();
			
			if (media.isTitleMatched(keyword)) {
				System.out.println(media.toString() + "CURRENT QUANTITY: " + quantity);
				System.out.println("---");
				found = true;
			}
		}
		
		if (!found) {
			System.out.println("‚ùå Cannot find any item that contains '" + keyword + "' in the current store.");
		}
	}
	
	public void searchItemsByCategory(String keyword) {
		if (keyword == null || keyword.trim().isEmpty()) {
			System.out.println("‚ùå Keyword is invalid");
			return;
		}
		
		boolean found = false;
		
		System.out.println("üîç See the result(s) when you search for '" + keyword + "':");
		
		for (Map.Entry<Media, Integer> entry : itemsInStore.entrySet()) {
			Media media = entry.getKey();
			int quantity = entry.getValue();
			
			if (media.isCategoryMatched(keyword)) {
				System.out.println(media.toString() + "CURRENT QUANTITY: " + quantity);
				System.out.println("---");
				found = true;
			}
		}
		
		if (!found) {
			System.out.println("‚ùå Cannot find any item that belongs to category '" + keyword + "' in the current store.");
		}
	}
	
	public void sortItemsByTitle() {
		if (itemsInStore.isEmpty()) {
			System.out.println("‚ùå The current store is empty!");
			return;
		}
		
		List<Media> sortedList = new ArrayList<>(itemsInStore.keySet());
		sortedList.sort(Media.COMPARE_BY_TITLE_COST);
		
		System.out.println("üìã List of items in store after being sorted by title:");
		for (Media media : sortedList) {
			int quantity = itemsInStore.get(media);
			System.out.println(media.toString() + "CURRENT QUANTITY: " + quantity);
			System.out.println("---");
		}
	}
	
	public void sortItemsByCost() {
		if (itemsInStore.isEmpty()) {
			System.out.println("‚ùå The current store is empty!");
			return;
		}
		
		List<Media> sortedList = new ArrayList<>(itemsInStore.keySet());
		sortedList.sort(Media.COMPARE_BY_COST_TITLE);
		
		System.out.println("üìã List of items in store after being sorted by cost:");
		for (Media media : sortedList) {
			int quantity = itemsInStore.get(media);
			System.out.println(media.toString() + "CURRENT QUANTITY: " + quantity);
			System.out.println("---");
		}
	}
	
	public boolean checkAvailabilityQuantity(Cart cart) {
		Map<Media, Integer> itemsInCart = cart.getItemsOrdered();
		
		for (Media media : itemsInCart.keySet()) {
			int quantityInCart = itemsInCart.get(media);
			int quantityInStore = this.getItemQuantity(media);
			
			if (quantityInCart > quantityInStore) {
				System.out.println("‚ö†Ô∏è The quantity of item '" + media .getTitle() + "' in current store is not enough.");
				return false;
			}
		}
		
		return true;
	}
	
	public void show() {
		System.out.println();
		System.out.println("=== THE CURRENT STORE ===");
		for (Map.Entry<Media, Integer> entry : itemsInStore.entrySet() ) {
			Media media = entry.getKey();
			int currQuantity = entry.getValue();
			System.out.println(media.toString() + "CURRENT QUANTITY: " + currQuantity);
			System.out.println("---");
		}
		System.out.println();
	}
}
